
-------------------------------------------------------
-- 세미프로젝트 DB
-------------------------------------------------------



-------------------------------------------------------
-- host table 생성 : host
-------------------------------------------------------

drop table host;

Create table host(
host_no number primary key,
host_id varchar2(20) not null unique,
host_pw varchar2(16) not null,
host_name varchar2(21) not null,
host_phone varchar2(11) not null unique,
host_email_id varchar2(20) not null,
host_email_domain varchar2(15) check (host_email_domain in ('@naver.com', '@nate.com', '@gmail.com', '@daum.net', '@hanmail.net' )),
host_post varchar2(6),
host_basic_addr varchar2(255),
host_extra_addr varchar2(255),
host_bank_name varchar(30) not null,
host_bank_account varchar2(25) not null,
host_joindate date DEFAULT sysdate,
host_lastlogin date
);

-- 시퀀시 생성 
drop sequence host_no_seq;
create sequence host_no_seq;


------------------------------------------------------------------------------







-------------------------------------------------------
-- users table 생성 :  users
-------------------------------------------------------

drop table users;

create table users(
User_no number primary key,
User_id varchar2(20) not null unique,
User_pw varchar2(16) not null,
User_name varchar2(21) not null,
User_phone varchar2(11) not null unique,
User_email_id varchar2(20) not null,
User_emaill_domain varchar2(15) not null 
check(User_emaill_domain in(
'@naver.com', '@nate.com', '@gmail.com', '@daum.net', '@hanmail.net')),
User_point number default 0,
User_Interest varchar2(21) 
check(User_Interest in ('액티비티', '배움', '건강/뷰티', '모임', '여행')),
User_birth varchar2(8),
User_join_date date default sysdate,
User_last_login date default null
);

-- 시퀀시 생성 
drop sequence Users_no_seq;
create sequence Users_no_seq;

-------------------------------------------------------








-------------------------------------------------------
-- Content table 생성 :  host_content
-------------------------------------------------------

drop table host_content;

create table host_content(
host_content_no number primary key,
host_id CONSTRAINT fk_hcontent_host REFERENCES host(host_id) on delete CASCADE,
host_content_category varchar2(21) not null check (host_content_category in ('액티비티', '배움', '건강/뷰티', '모임', '여행')),
host_content_cost number not null check ( host_content_cost > 0),
host_content_name varchar2(100),
host_content_ticket number not null check (host_content_ticket >= 0),
host_content_info varchar2(4000),
host_content_start_date date,
host_content_last_date date,
host_content_location varchar2(30),
host_content_ect_info varchar2(1000),
host_content_QA varchar2(1000),
host_content_approval varchar2(6) default '보류' check (host_content_approval in ('보류', '승인', '반려')), 
host_content_Create_date date default sysdate,
host_content_view_count number default 0,
host_content_payment_count number default 0
);

-- 제약조건 삭제 
alter table host_content drop CONSTRAINT SYS_C0016072;
-- 제약조건 추가
alter table host_content add CONSTRAINT host_content_ticket check (host_content_ticket >= 0);
commit;

-- 설정 변경 
alter table host_content MODIFy(host_content_location varchar2(100));


-- 테이블 안 데이터만 삭제
delete from host_content;
commit;

-- 시퀀스 생성
drop sequence host_content_no_seq;
create sequence host_content_no_seq;


select * from host_content;

----------------------------------------------------------------------------


----------------------------------------------------------------------------
-- 댓글에 필요한 groupno, superno, depth 추가 및 속성 변경
----------------------------------------------------------------------------
-- host_content 테이블 구조 변경 시작
----------------------------------------------------------------------------
alter table host_content add (
groupno number,
superno constraint fk_host_content_superno REFERENCES host_content(host_content_no) on delete cascade,
depth number default 0 
);

-- 그룹번호는 no 와 동일하게 설정
update host_content set groupno = host_content_no;
alter table host_content modify groupno not null;

update host_content set depth = 0;
alter table host_content modify depth not null;
commit;
-- 게시판 구조변경 종료

-----------------------------------------------------------

-- list에서 조회하면서 댓글게시판 조회하는 sql 구문
-- 보드의 모든 데이터를 조회하는데
select * from host_content
-- no와 superno가 연결되어있고
connect by prior no = superno
-- seuperno가 null인 항목이 시작점이야
start with superno is null
-- 전체 데이터는 groupno 역방향, no 정방향 순이야
order siblings by groupno desc, no asc;
--list에서 조회하면서 댓글게시판 조회하는 sql 구문 종료


---------------------------------------------------------





-------------------------------------------------------
-- 사진 업로드 테이블 : host_content_photo
-------------------------------------------------------

drop table host_content_photo;

create table host_content_photo(
host_content_photo_no number primary key,
host_content_no CONSTRAINT  fk_photo_host_content REFERENCES host_content(host_content_no) on delete CASCADE,
host_content_original_file varchar2(260),
host_content_edit_file varchar2(260)
);

-- 데이터 삭제
delete from host_content_photo;
commit;

-- 시퀀스 생성
drop sequence host_content_photo_seq;
create sequence host_content_photo_seq;

-----------------------------------------------------------------------------------------



-------------------------------------------------------------------------------
-- 결제 내역, 이용 내역 테이블 생성 : content_history
-------------------------------------------------------------------------------

-- host에게는 결제정보 (User의 아이디, 이름, 전화번호를 제공하는 것이 목적)
-- user에게는 이용정보 (Host의 0이름, 전화번호, 로케이션, 컨텐츠 정보를 제공하는 것이 목적)
-- 거의 다 외래키
-- 조인 테이블 : host, user, content, content_history
-------------------------------------------------------------------------------
drop table content_history;

create table content_history(
history_no number primary key,
host_history_no CONSTRAINT fk_history_content REFERENCES host_content(host_content_no) on delete set null,
users_history_no CONSTRAINT fk_history_user_no REFERENCES users(user_no) on delete set null,
users_history_id  CONSTRAINT fk_history_user_id REFERENCES users(user_id) on delete set null,
user_qty number,
user_reservation_date date
);

-- 데이터 삭제
delete from content_history;
commit;




-- 시퀀스 생성
drop sequence content_history_seq;
create sequence content_history_seq;

----------------------------------------------------------------------------
-- 댓글에 필요한 groupno, superno, depth 추가 및 속성 변경
----------------------------------------------------------------------------
--- content_history 테이블 구조 변경 시작
----------------------------------------------------------------------------
alter table content_history add (
groupno number,
superno constraint fk_content_history_superno REFERENCES content_history(history_no) on delete cascade,
depth number default 0 
);

-- 그룹번호는 no 와 동일하게 설정
update content_history set groupno = history_no;
alter table content_history modify groupno not null;


update content_history set depth = 0;
alter table content_history modify depth not null;
commit;
-- 게시판 구조변경 종료

-----------------------------------------------------------

-- list에서 조회하면서 댓글게시판 조회하는 sql 구문
-- 보드의 모든 데이터를 조회하는데
select * from host_content
-- no와 superno가 연결되어있고
connect by prior no = superno
-- seuperno가 null인 항목이 시작점이야
start with superno is null
-- 전체 데이터는 groupno 역방향, no 정방향 순이야
order siblings by groupno desc, no asc;
--list에서 조회하면서 댓글게시판 조회하는 sql 구문 종료


---------------------------------------------------------

-- content_history 컬럼 추가
alter table content_history add(
user_class_date date
);

-- test 예약

select * from content_history;

insert into content_history values (content_history_seq.nextval, 44, 11, 'dddddd', 1, sysdate);

commit;

-------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------
-- 뷰 생성 (가상의 테이블 생성)
--------------------------------------------------------------------------------------
-- inner join(내부조인) 인지 left outer join(외부조인) 으로 해야하는지 확인
-- A, B 테이블을 join 할 경우, 조건에 맞지 않은 데이터도 표시하고 싶을 때 outer join 사용
-- 추가로 left/right outer join은 기준이 되는 테이블이 조인 수행시 무조건 드라이빙 테이블이 됨
-- 드라이빙 테이블은 join이 발생했을때 첫번째로 access 되는 테이블임, 어떤 테이블일 드라이빙 테이블이 되느냐가
-- 쿼리 성능이나 튜닝 부분에서 굉장히 중요한 영향을 끼침
-- 데이터의 양 보다는 적은 데이터를 추출하는 테이블로 드라이빙 잡는 것이 중요
------------------------------------------------------------------------------------------------------

-- host에게는 결제정보 (User의 아이디, 이름, 전화번호 & 컨텐츠 예약 번호 를 제공하는 것이 목적)
-- 보내줘야 하는 정보 (history_no, user_name, user_phone, user_qty, user_reservation_date, users_history_id, host_content_name, host_history_no)
-- 뷰에있는 (A.groupno, A.superno, A.depth)는 content_history의 컬럼내용임

drop view content_history_to_host;

-- 왜 안되는지 확인
create view content_history_to_host as
select history_no, user_name, user_phone, user_qty, user_reservation_date, users_history_id, B.host_content_name, B.host_id, 
host_history_no, user_class_date, A.groupno, A.superno, A.depth from
    (select CH.*, U.* from content_history CH right outer join users U
    on CH.users_history_no = U.user_no)A
    left outer join host_content B  on  A.history_no = B.host_content_no
    order by user_reservation_date desc;
    
select * from content_history_to_host;

desc users;
desc host_content;
desc content_history;

select * from users;
select * from host_content;
select * from content_history;



-- 특정 판매자의 예약내역
-- 판매자 + 예약내역 + 사용자 where 판매자 = ?
create view content_history_to_host as
select 
 history_no, user_name, user_phone, user_qty, user_reservation_date, users_history_id, host_content_name, host_id, 
host_history_no, user_class_date, CH.groupno, CH.superno, CH.depth
from 
    content_history CH 
        inner join host_content HC on CH.host_history_no = HC.host_content_no
        inner join users USR on CH.users_history_no = USR.user_no;




-- host 이용 테이블 검색 조건 작성
-- 내 컨텐츠에 예약한 user 정보 페이지

-- 예약번호 기준
select * from content_history_to_host where history_no ='4' order by history_no desc ;
-- 예약자 기준
select * from content_history_to_host where user_name ='김지은' order by history_no desc ;
-- 컨텐츠 번호 기준
select * from content_history_to_host where host_history_no ='45' order by history_no desc ;



-- 컨텐츠 호스트아이디 기준
select * from content_history_to_host where host_id ='gksrmawn' order by history_no desc ;


----------------------------------------------------------------------------------------------------------
-- user에게는 이용정보 (Host의 0이름, 전화번호, 로케이션, 컨텐츠 정보를 제공하는 것이 목적)
-- 보내줘야 하는 정보 (host_content_name, host_content_cost, host_name, host_phone, host_content_location, user_reservation_date)
-- 뷰에있는 (B.groupno, B.superno, B.depth)는 content_history의 컬럼내용임

drop view content_history_to_users;

create view content_history_to_users as
select host_name, host_phone, host_content_name, host_content_cost, host_content_location, user_reservation_date, 
user_qty,users_history_id, user_class_date, B.groupno, B.superno, B.depth  from 
    (select H.host_name, H.host_phone, HC.host_content_name, HC.host_content_cost, HC.host_content_location, HC.host_content_no from 
    host H right outer join host_content HC on H.host_id = HC.host_id) A
    right outer join content_history B on A.host_content_no = B.host_history_no
    order by user_reservation_date desc;
 

select * from content_history_to_users;

-- user 이용 테이블 검색 조건 작성
-- 내가 결제한 컨텐츠를 보는 페이지 (내가 최근에 결제한 순서로 정렬)

select * from content_history_to_users where users_history_id = 'qkrtjddo' order by user_reservation_date desc;


-----------------------------------------------------------------------------------------------








-------------------------------------------------------
-- user 후기테이블 생성(content 밑에 보여 줄 내용)
-------------------------------------------------------

drop table user_review;

create table user_review(
review_no number primary key,
review_writer CONSTRAINT fk_review_user REFERENCES users(user_id) on delete set null,
content_original_no CONSTRAINT fk_review_content REFERENCES host_content(host_content_no) on delete CASCADE,
review_title varchar2(100) not null,
review_content varchar2(1000) not null,
review_date date default sysdate
); 

-- 데이터 삭제
delete from user_review;
commit;

-- review_title 컬럼 삭제
alter table user_review drop COLUMN review_title;


-- user_review test 추가

insert into user_review values (
user_review_seq.nextval,
'dladnwls',
'42',
'리뷰내용입니다',
sysdate
);


-- 시퀀스 생성
drop sequence user_review_seq;
create sequence user_review_seq;


select * from user_review;
select * from user_review where review_writer = 'dksthgml';

------------------------------------------------------------------------------------





-------------------------------------------------------------------------------------
-- 공지사항 게시판 생성
-------------------------------------------------------------------------------------

drop table notice;

create table notice(
notice_no number primary key,
notice_writer varchar2(20) check(notice_writer in ('관리자', 'admin')),
notice_title varchar2(300),
notice_content varchar2(4000),
notice_date date default sysdate
);

-- 데이터 삭제
delete from notice;
commit;

-- 시퀀스 생성
drop sequence notice_seq;
create sequence notice_seq;

--test 공지사항 
insert into notice(notice_no, notice_writer, notice_title, notice_content, notice_date) values (notice_seq.nextval, 'admin', '12차 공지사항입니다', '홈페이지바랍니다', sysdate);

commit;

select * from notice;
---------------------------------------------------------------------------
----------------------------------------------------------------------------
-- 댓글에 필요한 groupno, superno, depth 추가 및 속성 변경
----------------------------------------------------------------------------
--- notice 테이블 구조 변경 시작
----------------------------------------------------------------------------
alter table notice add (
groupno number,
superno constraint fk_notice_superno REFERENCES notice(notice_no) on delete cascade,
depth number default 0 
);

-- 그룹번호는 no 와 동일하게 설정
update notice set groupno = notice_no;
alter table notice modify groupno not null;

update notice set depth = 0;
alter table notice modify depth not null;
commit;
-- 게시판 구조변경 종료

-----------------------------------------------------------

-- list에서 조회하면서 댓글게시판 조회하는 sql 구문
-- 보드의 모든 데이터를 조회하는데
select * from host_content
-- no와 superno가 연결되어있고
connect by prior no = superno
-- seuperno가 null인 항목이 시작점이야
start with superno is null
-- 전체 데이터는 groupno 역방향, no 정방향 순이야
order siblings by groupno desc, no asc;
--list에서 조회하면서 댓글게시판 조회하는 sql 구문 종료

---------------------------------------------------------
---------------------------------------------------------








-- host_content_list 최신순으로 불러오기
select * from host_content order by host_content_no desc;
-- host_content_list 중에 승인만 불러오 보여주기
select * from host_content where host_content_category = '액티비티' and host_content_approval='보류' order by host_content_no desc;


select * from host_content where host_content_approval = '보류';
-- 컨텐츠 승인 쿼리문 컨텐츠 넘버 기입
update host_content set host_content_approval='승인' where host_content_no = 1;
commit;
update host_content set host_content_approval='승인';
---------------------------------------------------------








-- 컨텐츠 정선에 대한 내용 수정
update host_content set host_content_cost = 16000, host_content_payment_count = 35 where host_content_no = 20;
commit;

---------------------------------------------------------
-- 정산
---------------------------------------------------------
-- user 에게는 사용 금액전체
-- host 에게는 content 별 가격 표시
-- 월별로 총 토탈 금액 표시
---------------------------------------------------------

-- user 가 결제한 모든 금액 (유저가 결제한 모든 금액 : 내이름  검색)
    select sum(user_pay_total) from (
    select users_history_id, (host_content_cost * user_qty)user_pay_total from content_history_to_users where users_history_id = 'qkrtjddo'
    );
-- 서브쿼리 확인
    select users_history_id, (host_content_cost * user_qty)user_pay_total from content_history_to_users where users_history_id = 'qkrtjddo';


---------------------------------------------------------------------------------------



-- host_content 결제된 모든 금액 (host_id 별 총 금액 : 나의 호스트 기준  이름으로 검색 )    
-- content + content_history 에서 확인 가능한 정보 join (host_content_cost * user_qty)
    select sum(host_content_cost * user_qty) total_payment from (
      select host_id, host_content_no, host_content_cost  from host_content where host_id = 'rlawldms'
      ) HC 
      inner join content_history CH on HC.host_content_no = CH.host_history_no;    
-- 서브쿼리 확인용
    select host_id, host_content_no, host_content_cost  from host_content where host_id = 'rlawldms';




-- host_content 결제된 모든 금액 (host_id 별 + 구간 검색 : 월별) 
      select sum(host_content_cost * user_qty) total_payment from (
      select host_id, host_content_no, host_content_cost  from host_content where host_id = 'rlawldms'
      ) HC 
      inner join content_history CH on HC.host_content_no = CH.host_history_no
      where extract(MONTH from CH.user_reservation_date) between 11 and 12;
  
  
-- 전원, 현월 매출 검색
      select sum(host_content_cost * user_qty) total_payment from (
      select host_id, host_content_no, host_content_cost from host_content where host_id = 'rlawldms'
      ) HC inner join content_history CH on HC.host_content_no = CH.host_history_no
      where user_reservation_date like '19/12/%';
      
      
  
-- 전월 매출 구해요기 30 일전 
select sysdate - 31 from dual;
-- 월만 구해요기
select to_char(sysdate-31, 'MM') from dual;
-- 한달 전 날짜 
select to_char(add_months(sysdate, -1), 'MM') from dual;

-- 전월 매출 구해요기 오늘
select sysdate from dual;
-- 월만 구해오기
select to_char(sysdate, 'MM') from dual;
 
----------------------------------------------------------




